$date
	Mon Jul 19 00:29:19 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module flopenr2 $end
$var wire 1 ! clk $end
$var wire 32 " d [31:0] $end
$var wire 1 # en $end
$var wire 1 $ reset $end
$var reg 32 % q [31:0] $end
$upscope $end
$scope module flopr2 $end
$var wire 1 & clk $end
$var wire 32 ' d [31:0] $end
$var wire 1 ( reset $end
$var reg 32 ) q [31:0] $end
$upscope $end
$scope module mux2_1 $end
$var wire 32 * d0 [31:0] $end
$var wire 32 + d1 [31:0] $end
$var wire 1 , s $end
$var wire 32 - y [31:0] $end
$upscope $end
$scope module mux3_1 $end
$var wire 32 . d0 [31:0] $end
$var wire 32 / d1 [31:0] $end
$var wire 32 0 d2 [31:0] $end
$var wire 2 1 s [1:0] $end
$var wire 32 2 y [31:0] $end
$upscope $end
$scope module testbench $end
$var wire 32 3 WriteData [31:0] $end
$var wire 1 4 MemWrite $end
$var wire 32 5 DataAdr [31:0] $end
$var reg 1 6 clk $end
$var reg 1 7 reset $end
$scope module dut $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 8 WriteData [31:0] $end
$var wire 32 9 ReadData [31:0] $end
$var wire 1 4 MemWrite $end
$var wire 32 : Adr [31:0] $end
$scope module arm $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 ; WriteData [31:0] $end
$var wire 2 < ResultSrc [1:0] $end
$var wire 1 = RegWrite $end
$var wire 2 > RegSrc [1:0] $end
$var wire 32 ? ReadData [31:0] $end
$var wire 1 @ PCWrite $end
$var wire 1 4 MemWrite $end
$var wire 32 A Instr [31:0] $end
$var wire 2 B ImmSrc [1:0] $end
$var wire 1 C IRWrite $end
$var wire 1 D AdrSrc $end
$var wire 32 E Adr [31:0] $end
$var wire 2 F ALUSrcB [1:0] $end
$var wire 2 G ALUSrcA [1:0] $end
$var wire 4 H ALUFlags [3:0] $end
$var wire 2 I ALUControl [1:0] $end
$scope module c $end
$var wire 20 J Instr [31:12] $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 K ResultSrc [1:0] $end
$var wire 1 = RegWrite $end
$var wire 1 L RegW $end
$var wire 2 M RegSrc [1:0] $end
$var wire 1 @ PCWrite $end
$var wire 1 N PCS $end
$var wire 1 O NextPC $end
$var wire 1 4 MemWrite $end
$var wire 1 P MemW $end
$var wire 2 Q ImmSrc [1:0] $end
$var wire 1 C IRWrite $end
$var wire 2 R FlagW [1:0] $end
$var wire 1 D AdrSrc $end
$var wire 2 S ALUSrcB [1:0] $end
$var wire 2 T ALUSrcA [1:0] $end
$var wire 4 U ALUFlags [3:0] $end
$var wire 2 V ALUControl [1:0] $end
$scope module cl $end
$var wire 4 W Cond [3:0] $end
$var wire 2 X FlagWrite [1:0] $end
$var wire 1 4 MemWrite $end
$var wire 1 @ PCWrite $end
$var wire 1 = RegWrite $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 1 L RegW $end
$var wire 1 N PCS $end
$var wire 1 O NextPC $end
$var wire 1 P MemW $end
$var wire 4 Y Flags [3:0] $end
$var wire 2 Z FlagW [1:0] $end
$var wire 1 [ CondExDelayed $end
$var wire 1 \ CondEx $end
$var wire 4 ] ALUFlags [3:0] $end
$scope module cc $end
$var wire 4 ^ Cond [3:0] $end
$var wire 4 _ Flags [3:0] $end
$var wire 1 ` ge $end
$var wire 1 a zero $end
$var wire 1 b overflow $end
$var wire 1 c neg $end
$var wire 1 d carry $end
$var reg 1 \ CondEx $end
$upscope $end
$scope module condexes $end
$var wire 1 6 clk $end
$var wire 1 \ d $end
$var wire 1 7 reset $end
$var reg 1 [ q $end
$upscope $end
$scope module flagreg0 $end
$var wire 1 6 clk $end
$var wire 2 e d [1:0] $end
$var wire 1 f en $end
$var wire 1 7 reset $end
$var reg 2 g q [1:0] $end
$upscope $end
$scope module flagreg1 $end
$var wire 1 6 clk $end
$var wire 2 h d [1:0] $end
$var wire 1 i en $end
$var wire 1 7 reset $end
$var reg 2 j q [1:0] $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 6 k Funct [5:0] $end
$var wire 2 l ImmSrc [1:0] $end
$var wire 2 m Op [1:0] $end
$var wire 1 N PCS $end
$var wire 4 n Rd [3:0] $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 o ResultSrc [1:0] $end
$var wire 1 L RegW $end
$var wire 2 p RegSrc [1:0] $end
$var wire 1 O NextPC $end
$var wire 1 P MemW $end
$var wire 1 C IRWrite $end
$var wire 1 q Branch $end
$var wire 1 D AdrSrc $end
$var wire 2 r ALUSrcB [1:0] $end
$var wire 2 s ALUSrcA [1:0] $end
$var wire 1 t ALUOp $end
$var reg 2 u ALUControl [1:0] $end
$var reg 2 v FlagW [1:0] $end
$scope module fsm $end
$var wire 6 w Funct [5:0] $end
$var wire 2 x Op [1:0] $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 y ResultSrc [1:0] $end
$var wire 1 L RegW $end
$var wire 1 O NextPC $end
$var wire 1 P MemW $end
$var wire 1 C IRWrite $end
$var wire 1 q Branch $end
$var wire 1 D AdrSrc $end
$var wire 2 z ALUSrcB [1:0] $end
$var wire 2 { ALUSrcA [1:0] $end
$var wire 1 t ALUOp $end
$var reg 13 | controls [12:0] $end
$var reg 4 } nextstate [3:0] $end
$var reg 4 ~ state [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 2 !" ALUControl [1:0] $end
$var wire 2 "" ALUSrcA [1:0] $end
$var wire 2 #" ALUSrcB [1:0] $end
$var wire 1 D AdrSrc $end
$var wire 1 C IRWrite $end
$var wire 2 $" ImmSrc [1:0] $end
$var wire 1 @ PCWrite $end
$var wire 2 %" RegSrc [1:0] $end
$var wire 1 = RegWrite $end
$var wire 2 &" ResultSrc [1:0] $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 '" WriteData [31:0] $end
$var wire 32 (" SrcB [31:0] $end
$var wire 32 )" SrcA [31:0] $end
$var wire 32 *" Result [31:0] $end
$var wire 32 +" ReadData [31:0] $end
$var wire 32 ," RD2 [31:0] $end
$var wire 32 -" RD1 [31:0] $end
$var wire 4 ." RA2 [3:0] $end
$var wire 4 /" RA1 [3:0] $end
$var wire 32 0" PC [31:0] $end
$var wire 32 1" Instr [31:0] $end
$var wire 32 2" ExtImm [31:0] $end
$var wire 32 3" Data [31:0] $end
$var wire 32 4" Adr [31:0] $end
$var wire 32 5" ALUResult [31:0] $end
$var wire 32 6" ALUOut [31:0] $end
$var wire 4 7" ALUFlags [3:0] $end
$var wire 32 8" A [31:0] $end
$scope module ALU $end
$var wire 2 9" ALUControl [1:0] $end
$var wire 1 :" carry $end
$var wire 1 ;" overflow $end
$var wire 1 <" zero $end
$var wire 33 =" sum [32:0] $end
$var wire 1 >" neg $end
$var wire 32 ?" b [31:0] $end
$var wire 32 @" a [31:0] $end
$var wire 4 A" ALUFlags [3:0] $end
$var reg 32 B" Result [31:0] $end
$upscope $end
$scope module ALUflopr $end
$var wire 1 6 clk $end
$var wire 32 C" d [31:0] $end
$var wire 1 7 reset $end
$var reg 32 D" q [31:0] $end
$upscope $end
$scope module data_from_memory $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 E" d [31:0] $end
$var reg 32 F" q [31:0] $end
$upscope $end
$scope module datos $end
$var wire 1 6 clk $end
$var wire 1 C en $end
$var wire 1 7 reset $end
$var wire 32 G" d [31:0] $end
$var reg 32 H" q [31:0] $end
$upscope $end
$scope module ext $end
$var wire 2 I" ImmSrc [1:0] $end
$var wire 24 J" Instr [23:0] $end
$var reg 32 K" ExtImm [31:0] $end
$upscope $end
$scope module instruct $end
$var wire 32 L" d1 [31:0] $end
$var wire 2 M" s [1:0] $end
$var wire 32 N" y [31:0] $end
$var wire 32 O" d0 [31:0] $end
$upscope $end
$scope module muxALUSrcA $end
$var wire 2 P" s [1:0] $end
$var wire 32 Q" y [31:0] $end
$var wire 32 R" d1 [31:0] $end
$var wire 32 S" d0 [31:0] $end
$upscope $end
$scope module muxALUSrcB $end
$var wire 32 T" d1 [31:0] $end
$var wire 32 U" d2 [31:0] $end
$var wire 2 V" s [1:0] $end
$var wire 32 W" y [31:0] $end
$var wire 32 X" d0 [31:0] $end
$upscope $end
$scope module muxResult $end
$var wire 32 Y" d0 [31:0] $end
$var wire 32 Z" d1 [31:0] $end
$var wire 32 [" d2 [31:0] $end
$var wire 2 \" s [1:0] $end
$var wire 32 ]" y [31:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 6 clk $end
$var wire 32 ^" d [31:0] $end
$var wire 1 @ en $end
$var wire 1 7 reset $end
$var reg 32 _" q [31:0] $end
$upscope $end
$scope module r1 $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 `" d [31:0] $end
$var reg 32 a" q [31:0] $end
$upscope $end
$scope module r2 $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 b" d [31:0] $end
$var reg 32 c" q [31:0] $end
$upscope $end
$scope module ra1mux $end
$var wire 4 d" d0 [3:0] $end
$var wire 4 e" d1 [3:0] $end
$var wire 2 f" s [1:0] $end
$var wire 4 g" y [3:0] $end
$upscope $end
$scope module ra2mux $end
$var wire 4 h" d0 [3:0] $end
$var wire 4 i" d1 [3:0] $end
$var wire 2 j" s [1:0] $end
$var wire 4 k" y [3:0] $end
$upscope $end
$scope module rf $end
$var wire 1 6 clk $end
$var wire 32 l" r15 [31:0] $end
$var wire 4 m" ra1 [3:0] $end
$var wire 4 n" ra2 [3:0] $end
$var wire 4 o" wa3 [3:0] $end
$var wire 32 p" wd3 [31:0] $end
$var wire 1 = we3 $end
$var wire 32 q" rd2 [31:0] $end
$var wire 32 r" rd1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 32 s" a [31:0] $end
$var wire 1 6 clk $end
$var wire 32 t" rd [31:0] $end
$var wire 32 u" wd [31:0] $end
$var wire 1 4 we $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 u"
b11100000010011110000000000001111 t"
b0 s"
bx r"
bx q"
b100 p"
b0 o"
b0 n"
b0 m"
b100 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b1111 e"
b0 d"
b0 c"
bx b"
b0 a"
bx `"
b0 _"
b100 ^"
b100 ]"
b10 \"
b100 ["
b0 Z"
b0 Y"
b0 X"
b100 W"
b10 V"
b100 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b1 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b11100000010011110000000000001111 G"
b0 F"
b11100000010011110000000000001111 E"
b0 D"
b100 C"
b100 B"
b0 A"
b0 @"
b100 ?"
0>"
b100 ="
0<"
0;"
0:"
b0 9"
b0 8"
b0 7"
b0 6"
b100 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
bx -"
bx ,"
b11100000010011110000000000001111 +"
b100 *"
b0 )"
b100 ("
b0 '"
b10 &"
b0 %"
b0 $"
b10 #"
b1 ""
b0 !"
b0 ~
b1 }
b1000101001100 |
b1 {
b10 z
b10 y
b0 x
b0 w
b0 v
b0 u
0t
b1 s
b10 r
0q
b0 p
b10 o
b0 n
b0 m
b0 l
b0 k
b0 j
0i
b0 h
b0 g
0f
b0 e
0d
0c
0b
0a
1`
b0 _
b0 ^
b0 ]
0\
0[
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b1 T
b10 S
b0 R
b0 Q
0P
1O
0N
b0 M
0L
b10 K
b0 J
b0 I
b0 H
b1 G
b10 F
b0 E
0D
1C
b0 B
b0 A
1@
b11100000010011110000000000001111 ?
b0 >
0=
b10 <
b0 ;
b0 :
b11100000010011110000000000001111 9
b0 8
17
16
b0 5
04
b0 3
bz 2
bz 1
bz 0
bz /
bz .
bz -
z,
bz +
bz *
bx )
z(
bz '
z&
bx %
z$
z#
bz "
z!
$end
#5
06
#10
16
#15
06
#20
16
#22
07
#25
06
#30
b1000 ,"
b1000 b"
b1000 q"
b1000 -"
b1000 `"
b1000 r"
1\
b1000 *"
b1000 ]"
b1000 ^"
b1000 l"
b1000 p"
0@
b1111 2"
b1111 K"
b1111 T"
b1111 ."
b1111 k"
b1111 n"
b1111 /"
b1111 g"
b1111 m"
b100 k
b100 w
b1110 W
b1110 ^
b1000 5"
b1000 B"
b1000 C"
b1000 ["
b11100010100000000010000000000101 9
b11100010100000000010000000000101 ?
b11100010100000000010000000000101 +"
b11100010100000000010000000000101 E"
b11100010100000000010000000000101 G"
b11100010100000000010000000000101 t"
0O
0C
b10011110000000000001111 J"
b1111 h"
b1111 d"
b11100000010011110000 J
b1000 ="
b100 )"
b100 @"
b100 Q"
b100 5
b100 :
b100 E
b100 4"
b100 N"
b100 s"
b110 }
b1001100 |
b100 6"
b100 D"
b100 L"
b100 Y"
bx 3
bx 8
bx ;
bx '"
bx X"
bx c"
bx u"
bx 8"
bx S"
bx a"
b11100000010011110000000000001111 3"
b11100000010011110000000000001111 F"
b11100000010011110000000000001111 Z"
b11100000010011110000000000001111 A
b11100000010011110000000000001111 1"
b11100000010011110000000000001111 H"
b100 0"
b100 O"
b100 R"
b100 _"
b1 ~
16
#35
06
#40
b1 h
b100 H
b100 U
b100 ]
b100 7"
b100 A"
1<"
b1000 ("
b1000 ?"
b1000 W"
b0 5"
b0 B"
b0 C"
b0 ["
b0 ="
b1000 )"
b1000 @"
b1000 Q"
b1 I
b1 V
b1 u
b1 !"
b1 9"
b0 <
b0 K
b0 o
b0 y
b0 &"
b0 \"
b0 G
b0 T
b0 s
b0 {
b0 ""
b0 P"
b0 F
b0 S
b0 r
b0 z
b0 #"
b0 V"
1t
b1 |
b1000 }
b110 ~
1[
b11100010100000000010000000000101 3"
b11100010100000000010000000000101 F"
b11100010100000000010000000000101 Z"
b1000 8"
b1000 S"
b1000 a"
b1000 3
b1000 8
b1000 ;
b1000 '"
b1000 X"
b1000 c"
b1000 u"
b1000 6"
b1000 D"
b1000 L"
b1000 Y"
16
#45
06
#50
0;"
b0 e
0:"
0>"
b0 h
b0 H
b0 U
b0 ]
b0 7"
b0 A"
0<"
b10000 5"
b10000 B"
b10000 C"
b10000 ["
b10000 ="
b0 -"
b0 `"
b0 r"
b0 ,"
b0 b"
b0 q"
1=
b0 I
b0 V
b0 u
b0 !"
b0 9"
b0 *"
b0 ]"
b0 ^"
b0 l"
b0 p"
1L
0t
b0 }
b1000000000 |
b0 6"
b0 D"
b0 L"
b0 Y"
b1000 ~
16
#55
06
#60
1@
0=
b1000 -"
b1000 `"
b1000 r"
b1000 ,"
b1000 b"
b1000 q"
1O
0L
1C
b10 <
b10 K
b10 o
b10 y
b10 &"
b10 \"
b1 G
b1 T
b1 s
b1 {
b1 ""
b1 P"
b10 F
b10 S
b10 r
b10 z
b10 #"
b10 V"
b1000 5"
b1000 B"
b1000 C"
b1000 ["
b100 ("
b100 ?"
b100 W"
b1000 *"
b1000 ]"
b1000 ^"
b1000 l"
b1000 p"
b1000101001100 |
b1 }
b1000 ="
b100 )"
b100 @"
b100 Q"
b0 ~
b0 8"
b0 S"
b0 a"
b0 3
b0 8
b0 ;
b0 '"
b0 X"
b0 c"
b0 u"
b10000 6"
b10000 D"
b10000 L"
b10000 Y"
16
#65
06
#70
bx ,"
bx b"
bx q"
b0 -"
b0 `"
b0 r"
b1100 *"
b1100 ]"
b1100 ^"
b1100 l"
b1100 p"
0@
b101 2"
b101 K"
b101 T"
b101 ."
b101 k"
b101 n"
b0 /"
b0 g"
b0 m"
b101000 k
b101000 w
b10 n
b1100 5"
b1100 B"
b1100 C"
b1100 ["
b11100010100000000011000000001100 9
b11100010100000000011000000001100 ?
b11100010100000000011000000001100 +"
b11100010100000000011000000001100 E"
b11100010100000000011000000001100 G"
b11100010100000000011000000001100 t"
0O
0C
b100000000010000000000101 J"
b10 o"
b10 i"
b101 h"
b0 d"
b11100010100000000010 J
b1100 ="
b1000 )"
b1000 @"
b1000 Q"
b1000 5
b1000 :
b1000 E
b1000 4"
b1000 N"
b1000 s"
b110 }
b1001100 |
b1000 6"
b1000 D"
b1000 L"
b1000 Y"
b1000 3
b1000 8
b1000 ;
b1000 '"
b1000 X"
b1000 c"
b1000 u"
b1000 8"
b1000 S"
b1000 a"
b11100010100000000010000000000101 A
b11100010100000000010000000000101 1"
b11100010100000000010000000000101 H"
b1000 0"
b1000 O"
b1000 R"
b1000 _"
b1 ~
16
#75
06
#80
x;"
bx e
x:"
x>"
bx h
bx H
bx U
bx ]
bx 7"
bx A"
x<"
bx 5"
bx B"
bx C"
bx ["
bx ("
bx ?"
bx W"
bx ="
b0 )"
b0 @"
b0 Q"
b0 <
b0 K
b0 o
b0 y
b0 &"
b0 \"
b0 G
b0 T
b0 s
b0 {
b0 ""
b0 P"
b0 F
b0 S
b0 r
b0 z
b0 #"
b0 V"
1t
b1 |
b1000 }
b110 ~
b11100010100000000011000000001100 3"
b11100010100000000011000000001100 F"
b11100010100000000011000000001100 Z"
b0 8"
b0 S"
b0 a"
bx 3
bx 8
bx ;
bx '"
bx X"
bx c"
bx u"
b1100 6"
b1100 D"
b1100 L"
b1100 Y"
16
#85
06
#90
1=
bx *"
bx ]"
bx ^"
bx l"
bx p"
1L
0t
b0 }
b1000000000 |
bx 6"
bx D"
bx L"
bx Y"
b1000 ~
16
#95
06
#100
0;"
b0 e
0:"
0>"
b0 h
b1100 *"
b1100 ]"
b1100 ^"
b1100 l"
b1100 p"
b0 H
b0 U
b0 ]
b0 7"
b0 A"
0<"
b1100 5"
b1100 B"
b1100 C"
b1100 ["
b1100 ="
b100 ("
b100 ?"
b100 W"
1@
0=
b1000 )"
b1000 @"
b1000 Q"
1O
0L
1C
b10 <
b10 K
b10 o
b10 y
b10 &"
b10 \"
b1 G
b1 T
b1 s
b1 {
b1 ""
b1 P"
b10 F
b10 S
b10 r
b10 z
b10 #"
b10 V"
b1000101001100 |
b1 }
b0 ~
16
#105
06
#110
b10000 *"
b10000 ]"
b10000 ^"
b10000 l"
b10000 p"
0@
b1100 2"
b1100 K"
b1100 T"
b1100 ."
b1100 k"
b1100 n"
b11 n
b10000 5"
b10000 B"
b10000 C"
b10000 ["
b11100010010000110111000000001001 9
b11100010010000110111000000001001 ?
b11100010010000110111000000001001 +"
b11100010010000110111000000001001 E"
b11100010010000110111000000001001 G"
b11100010010000110111000000001001 t"
0O
0C
b100000000011000000001100 J"
b11 o"
b11 i"
b1100 h"
b11100010100000000011 J
b10000 ="
b1100 )"
b1100 @"
b1100 Q"
b1100 5
b1100 :
b1100 E
b1100 4"
b1100 N"
b1100 s"
b111 }
b1001100 |
b1100 6"
b1100 D"
b1100 L"
b1100 Y"
b11100010100000000011000000001100 A
b11100010100000000011000000001100 1"
b11100010100000000011000000001100 H"
b1100 0"
b1100 O"
b1100 R"
b1100 _"
b1 ~
16
#115
06
#120
b1100 5"
b1100 B"
b1100 C"
b1100 ["
b1100 ("
b1100 ?"
b1100 W"
b1100 ="
b0 )"
b0 @"
b0 Q"
b0 <
b0 K
b0 o
b0 y
b0 &"
b0 \"
b0 G
b0 T
b0 s
b0 {
b0 ""
b0 P"
b1 F
b1 S
b1 r
b1 z
b1 #"
b1 V"
1t
b11 |
b1000 }
b111 ~
b11100010010000110111000000001001 3"
b11100010010000110111000000001001 F"
b11100010010000110111000000001001 Z"
b10000 6"
b10000 D"
b10000 L"
b10000 Y"
16
#125
06
#130
x;"
bx e
x:"
x>"
bx h
bx H
bx U
bx ]
bx 7"
bx A"
x<"
bx 5"
bx B"
bx C"
bx ["
bx ="
bx ("
bx ?"
bx W"
1=
b1100 *"
b1100 ]"
b1100 ^"
b1100 l"
b1100 p"
1L
b0 F
b0 S
b0 r
b0 z
b0 #"
b0 V"
0t
b0 }
b1000000000 |
b1100 6"
b1100 D"
b1100 L"
b1100 Y"
b1000 ~
16
#135
06
#140
0;"
b0 e
0:"
0>"
b0 h
b0 H
b0 U
b0 ]
b0 7"
b0 A"
0<"
b10000 5"
b10000 B"
b10000 C"
b10000 ["
b10000 ="
b100 ("
b100 ?"
b100 W"
1@
0=
b1100 )"
b1100 @"
b1100 Q"
1O
0L
1C
b10 <
b10 K
b10 o
b10 y
b10 &"
b10 \"
b1 G
b1 T
b1 s
b1 {
b1 ""
b1 P"
b10 F
b10 S
b10 r
b10 z
b10 #"
b10 V"
b10000 *"
b10000 ]"
b10000 ^"
b10000 l"
b10000 p"
b1000101001100 |
b1 }
b0 ~
bx 6"
bx D"
bx L"
bx Y"
16
#145
06
#150
b1100 -"
b1100 `"
b1100 r"
b10100 *"
b10100 ]"
b10100 ^"
b10100 l"
b10100 p"
0@
b1001 2"
b1001 K"
b1001 T"
b1001 ."
b1001 k"
b1001 n"
b11 /"
b11 g"
b11 m"
b100100 k
b100100 w
b111 n
b10100 5"
b10100 B"
b10100 C"
b10100 ["
b11100001100001110100000000000010 9
b11100001100001110100000000000010 ?
b11100001100001110100000000000010 +"
b11100001100001110100000000000010 E"
b11100001100001110100000000000010 G"
b11100001100001110100000000000010 t"
0O
0C
b10000110111000000001001 J"
b111 o"
b111 i"
b1001 h"
b11 d"
b11100010010000110111 J
b10100 ="
b10000 )"
b10000 @"
b10000 Q"
b10000 5
b10000 :
b10000 E
b10000 4"
b10000 N"
b10000 s"
b111 }
b1001100 |
b10000 6"
b10000 D"
b10000 L"
b10000 Y"
b11100010010000110111000000001001 A
b11100010010000110111000000001001 1"
b11100010010000110111000000001001 H"
b10000 0"
b10000 O"
b10000 R"
b10000 _"
b1 ~
16
#155
06
#160
b1001 ("
b1001 ?"
b1001 W"
b11 5"
b11 B"
b11 C"
b11 ["
b11 ="
b1100 )"
b1100 @"
b1100 Q"
b1 I
b1 V
b1 u
b1 !"
b1 9"
b0 <
b0 K
b0 o
b0 y
b0 &"
b0 \"
b0 G
b0 T
b0 s
b0 {
b0 ""
b0 P"
b1 F
b1 S
b1 r
b1 z
b1 #"
b1 V"
1t
b11 |
b1000 }
b111 ~
b11100001100001110100000000000010 3"
b11100001100001110100000000000010 F"
b11100001100001110100000000000010 Z"
b1100 8"
b1100 S"
b1100 a"
b10100 6"
b10100 D"
b10100 L"
b10100 Y"
16
#165
06
#170
x;"
bx e
x:"
x>"
bx h
bx H
bx U
bx ]
bx 7"
bx A"
x<"
bx ("
bx ?"
bx W"
bx 5"
bx B"
bx C"
bx ["
bx ="
1=
b0 I
b0 V
b0 u
b0 !"
b0 9"
b11 *"
b11 ]"
b11 ^"
b11 l"
b11 p"
1L
b0 F
b0 S
b0 r
b0 z
b0 #"
b0 V"
0t
b0 }
b1000000000 |
b11 6"
b11 D"
b11 L"
b11 Y"
b1000 ~
16
#175
06
#180
0;"
b0 e
0:"
0>"
b0 h
b0 H
b0 U
b0 ]
b0 7"
b0 A"
0<"
b10100 5"
b10100 B"
b10100 C"
b10100 ["
b10100 ="
b100 ("
b100 ?"
b100 W"
1@
0=
b10000 )"
b10000 @"
b10000 Q"
1O
0L
1C
b10 <
b10 K
b10 o
b10 y
b10 &"
b10 \"
b1 G
b1 T
b1 s
b1 {
b1 ""
b1 P"
b10 F
b10 S
b10 r
b10 z
b10 #"
b10 V"
b10100 *"
b10100 ]"
b10100 ^"
b10100 l"
b10100 p"
b1000101001100 |
b1 }
b0 ~
bx 6"
bx D"
bx L"
bx Y"
16
#185
06
#190
b11 -"
b11 `"
b11 r"
b11000 *"
b11000 ]"
b11000 ^"
b11000 l"
b11000 p"
0@
b10 2"
b10 K"
b10 T"
b10 ."
b10 k"
b10 n"
b111 /"
b111 g"
b111 m"
b11000 k
b11000 w
b100 n
b11000 5"
b11000 B"
b11000 C"
b11000 ["
b11100000000000110101000000000100 9
b11100000000000110101000000000100 ?
b11100000000000110101000000000100 +"
b11100000000000110101000000000100 E"
b11100000000000110101000000000100 G"
b11100000000000110101000000000100 t"
0O
0C
b100001110100000000000010 J"
b100 o"
b100 i"
b10 h"
b111 d"
b11100001100001110100 J
b11000 ="
b10100 )"
b10100 @"
b10100 Q"
b10100 5
b10100 :
b10100 E
b10100 4"
b10100 N"
b10100 s"
b111 }
b1001100 |
b10100 6"
b10100 D"
b10100 L"
b10100 Y"
b11100001100001110100000000000010 A
b11100001100001110100000000000010 1"
b11100001100001110100000000000010 H"
b10100 0"
b10100 O"
b10100 R"
b10100 _"
b1 ~
16
#195
06
#200
b10 ("
b10 ?"
b10 W"
b11 5"
b11 B"
b11 C"
b11 ["
b1 ="
b11 )"
b11 @"
b11 Q"
b11 I
b11 V
b11 u
b11 !"
b11 9"
b0 <
b0 K
b0 o
b0 y
b0 &"
b0 \"
b0 G
b0 T
b0 s
b0 {
b0 ""
b0 P"
b1 F
b1 S
b1 r
b1 z
b1 #"
b1 V"
1t
b11 |
b1000 }
b111 ~
b11100000000000110101000000000100 3"
b11100000000000110101000000000100 F"
b11100000000000110101000000000100 Z"
b11 8"
b11 S"
b11 a"
b11000 6"
b11000 D"
b11000 L"
b11000 Y"
16
